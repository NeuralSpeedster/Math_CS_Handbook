== Динамическое программирование

Динамическое программирование(ДП) позволяет решать задачи, комбинируя решения вспомогательных задач.

Два варианта задач для решения методом динамического программирования:
- подсчёт количества способов;
- оптимизация(максимум или минимум).

*Этапы решения задачи методом ДП*.
+ Описание структуры оптимального решения;
+ Реккурентное соотношение для значения, соответствующего оптимальному решению(включая базу динамики);
+ Вычисление значения, соответствующего оптимальному решению методом восходящего анализа.
+ Составление оптимального решения, полученного на предыдущих этапах.

=== Простые примеры ДП

==== Ступеньки

За один шаг можно подняться на одну или две ступеньки. За посещение каждой из ступенек дают $a_i$ рублей. Необходимо найти максимальную сумму за подъём на вершину лестницы из $n$ ступенек.

_Решение:_  Пусть $d p [i]$ - максимальная сумма за подъём на $i$-ю ступеньку. Тогда 
$ d p [i] = a[i] + max(d p [i-1], d p [i-2]) $

База динамики. $d p [0] = 0$, $d p [1] = a[1]$. Ответ: $d p[n] space square.filled$.

Полученное решение имеет временную и пространственную сложность $Theta(n)$.
Пример таблицы для данной задачи(0 добавлен в качестве нулевого элемента).
#align(center, 
table(rows: 2, columns: 10, align: center,
$a[i]$, $0$, $10$, $-5$, $-20$, $-10$, $20$, $30$, $-10$, $10$, 
$d p[i]$, $0$, $10$, $5$, $-10$, $-5$, $15$, $45$, $35$, $55$, 
))

==== Ступеньки с сертификатом 

За один шаг можно подняться на одну или две ступеньки. За посещение каждой из ступенек дают $a_i$ рублей. Необходимо найти максимальную сумму за подъём на вершину лестницы из $n$ ступенек. Вывести _номера ступенек_, по которым мы шагали.

_Решение:_  Пусть $d p [i]$ - максимальная сумма за подъём на $i$-ю ступеньку. Выделим массив $p r e v [n]$, в $i$-том элементе которого будем хранить номер ступепньки, с которой мы попали на $i$-ю ступеньку. Тогда
$ d p [i] = a[i] + max(d p [i-1], d p [i-2]) $
$ p r e v[i] = op("argmax", limits: #true)_(i) (d p [i-1], d p [i-2]) $

База динамики. $d p [0] = 0$, $d p [1] = a[1]$ и теперь добавляется $p r e v[1] = 0$. Ответ: $d p[n] space square.filled$.

Пример таблицы для данной задачи:
#align(center, 
table(rows: 3, columns: 10, align: center,
$a[i]$, $0$, $10$, $-5$, $-20$, $-10$, $20$, $30$, $-10$, $10$, 
$d p[i]$, $0$, $10$, $5$, $-10$, $-5$, $15$, $45$, $35$, $55$, 
$p r e v[i]$, $0$, $0$, $1$, $1$, $2$, $4$, $5$, $6$, $6$, 
))

==== Наибольшая возрастающая подпоследовательность
Задача: найти длину наибольшей возрастающей подпоследовательности в массиве $a$.

- _подпоследовательность_ --- подпоследовательность, полученная вычёркиванием некоторых элементов из исходной(необязательно подряд идущих);

- _возрастающая_ --- $forall i in overline(1..n): a_(i+1) > a_i$.

- _наибольшая_ --- максимальная по длине среди всех подходящих 
  подпоследовательностей.


_Решение._  Пусть $d p [i]$ - длина наибольшей возрастающей подпоследовательности, заканчивающейся на $i$-ом элементе.
 